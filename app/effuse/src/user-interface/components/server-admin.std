<s:meta name="server-admin">
  <attr name="client">The API client for the SSO Server</attr>
</s:meta>

<script>
  let editing = undefined;

  function on_start_editing(event) {
    editing = event.detail;
  }

  async function update_metadata({ FormData }) {
    await self.client.PutMetadata(FormData.name, FormData.picture);
  }

  async function create_channel({ FormData }) {
    await self.client.PostChannel(FormData.name, FormData.type);
    document.dispatchEvent(new CustomEvent("ChannelsUpdated"));
  }

  async function create_role({ FormData }) {
    await self.client.PostRole(FormData.name, FormData.password);
  }

  async function rename_role(role, name) {
    if (role.Name === name) return;
    await self.client.PutRole(role.RoleId, name, role.Password);
  }

  async function rename_channel(channel, name) {
    if (channel.Name === name) return;
    await self.client.PutChannel(channel.ChannelId, name);
  }

  async function set_password(role, password) {
    if (role.Password === password) return;
    await self.client.PutRole(role.RoleId, role.Name, password);
  }

  async function set_admin(role, admin) {
    const is_admin = admin === "on";
    if (role.Admin === is_admin) return;
    if (is_admin) await self.client.PostAdminRole(role.RoleId);
    else await self.client.DeleteAdminRole(role.RoleId);
  }

  async function give_read(role, channel, may_read) {
    const is_read = may_read === "on";
    if (
      !!role.Policies.find((p) => p.ChannelId === channel.ChannelId) === is_read
    )
      return;

    await self.client.DeleteRoleChannel(role.RoleId, channel.ChannelId);
    await self.client.PostRoleChannel(role.RoleId, channel.ChannelId, false);
  }

  async function give_write(role, channel, may_write) {
    const is_write = may_write === "on";
    if (
      !!role.Policies.find((p) => p.ChannelId === channel.ChannelId)?.Write ===
      is_write
    )
      return;
    await self.client.DeleteRoleChannel(role.RoleId, channel.ChannelId);
    await self.client.PostRoleChannel(role.RoleId, channel.ChannelId, true);
  }

  let user_names = {};
  async function get_user_name(user_id) {
    const profile = await self.client.Sso.GetPublicProfile(user_id);

    const name = profile.UserName;
    user_names[user_id] = name;
    return name;
  }

  async function set_user_role(user_id, role_id) {
    await self.client.PutUserRole(user_id, role_id);
  }

  async function ban_user(user_id) {
    await self.client.PostBannedUser(user_id);
  }

  async function unban_user(user_id) {
    await self.client.DeleteBannedUser(user_id);
  }
</script>

<script on="mut">
  const metadata = await self.client.GetMetadata();
  const { Base64Data, MimeType } = metadata.Icon;

  const picture_url = `data:${MimeType};base64,${Base64Data}`;

  const channels = await self.client.GetAllChannels();
  const roles = await self.client.GetAllRolesAdmin();
  const users = await self.client.GetAllUsers();
  const banned = await self.client.GetAllBannedUsers();
  const is_admin = await self.client.IsAdmin();
</script>

<l-row no-padding>
  <l-col xs="12">
    <d-card>
      <span slot="title">Server Metadata</span>
      <f-form submit="event-only" on:Submitted="update_metadata">
        <l-row>
          <l-col xs="12">
            <f-input name="name" prefill=":metadata.ServerName" required>
              Server Name
            </f-input>
          </l-col>
          <l-col xs="12">
            <f-image name="picture" prefill=":picture_url">
              Profile Picture
            </f-image>
          </l-col>
          <l-col xs="12">
            <f-button type="submit">Update</f-button>
          </l-col>
        </l-row>
      </f-form>
    </d-card>
  </l-col>
  <l-col xs="12">
    <d-card>
      <span slot="title">Channels</span>
      <s:for subject=":channels" key="channel">
        <l-accordion>
          <span slot="title">
            <s:text use=":channel.Name" />
          </span>
          <l-row>
            <l-col xs="12">
              <f-input
                prefill=":channel.Name"
                on:ValueChanged="e => rename_channel(channel, e.Value)"
              >
                Name
              </f-input>
            </l-col>
          </l-row>
        </l-accordion>
      </s:for>
      <f-form submit="event-only" on:Submitted="create_channel">
        <l-row>
          <l-col xs="12">
            <t-heading level="h6">Create Channel</t-heading>
          </l-col>
          <l-col xs="12">
            <f-input name="name" required>Channel Name</f-input>
          </l-col>
          <l-col xs="12">
            <f-select name="type" required>
              <option value="Messages">Text Chat</option>
              <option value="Forum">Forum</option>
              <option value="Call">Voice Chat</option>
              <option value="Calendar">Calendar</option>
              <span slot="label">Channel Type</span>
            </f-select>
          </l-col>
          <l-col xs="12">
            <f-button type="submit">Create</f-button>
          </l-col>
        </l-row>
      </f-form>
    </d-card>
  </l-col>
  <l-col xs="12">
    <d-card>
      <span slot="title">Roles</span>
      <s:for subject=":roles" key="role">
        <l-accordion>
          <span slot="title">
            <s:text use=":role.Name" />
          </span>
          <l-row>
            <l-col xs="12">
              <f-input
                prefill=":role.Name"
                on:ValueChanged="e => rename_role(role, e.Value)"
              >
                Name
              </f-input>
            </l-col>
            <l-col xs="12">
              <f-input
                sensitive
                prefill=":role.Password"
                on:ValueChanged="e => set_password(role, e.Value)"
              >
                Password
              </f-input>
            </l-col>
            <l-col xs="12">
              <f-toggle
                prefill=":role.Admin ? 'on' : 'off'"
                on:ValueChanged="e => set_admin(role, e.Value)"
              >
                Is Admin
                <span slot="off">No</span>
                <span slot="on">Yes</span>
              </f-toggle>
            </l-col>
            <s:for subject=":channels" key="channel">
              <l-col xs="12" lg="4">
                <t-paragraph>
                  <s:text use=":channel.Name" />
                </t-paragraph>
              </l-col>
              <l-col xs="12" lg="4">
                <f-toggle
                  prefill=":!!role.Policies.find(p => p.ChannelId === channel.ChannelId) ? 'on' : 'off'"
                  on:ValueChanged="e => give_read(role, channel, e.Value)"
                >
                  May Read
                  <span slot="off">No</span>
                  <span slot="on">Yes</span>
                </f-toggle>
              </l-col>
              <l-col xs="12" lg="4">
                <f-toggle
                  prefill=":!!role.Policies.find(p => p.ChannelId === channel.ChannelId)?.Write ? 'on' : 'off'"
                  on:ValueChanged="e => give_write(role, channel, e.Value)"
                >
                  May Write
                  <span slot="off">No</span>
                  <span slot="on">Yes</span>
                </f-toggle>
              </l-col>
            </s:for>
          </l-row>
        </l-accordion>
      </s:for>

      <f-form submit="event-only" on:Submitted="create_role">
        <l-row>
          <l-col xs="12">
            <t-heading level="h6">Create Role</t-heading>
          </l-col>
          <l-col xs="12">
            <f-input name="name" required>Role Name</f-input>
          </l-col>
          <l-col xs="12">
            <f-input name="password" required sensitive>Password</f-input>
          </l-col>
          <l-col xs="12">
            <f-button type="submit">Create</f-button>
          </l-col>
        </l-row>
      </f-form>
    </d-card>
  </l-col>
  <l-col xs="12">
    <d-card>
      <span slot="title">Users</span>
      <l-row>
        <s:for subject=":users" key="user">
          <l-col xs="12" md="6" lg="4" xl="3">
            <s:use get=":roles.find(r => r.RoleId === user.Role)" as="role">
              <d-panel colour="body" bordered>
                <l-row>
                  <l-col xs="6">
                    <t-paragraph>
                      <async-text data=":get_user_name(user.UserId)" />
                    </t-paragraph>
                  </l-col>
                  <l-col xs="6" style="text-align: right">
                    <f-button
                      type="button"
                      on:click="() => ban_user(user.UserId)"
                    >
                      Ban User
                    </f-button>
                  </l-col>
                  <l-col xs="12">
                    <f-select
                      name="type"
                      prefill=":role.RoleId"
                      on:ValueChanged="e => set_user_role(user.UserId, e.Value)"
                    >
                      <s:for subject=":roles" as="role">
                        <option value=":role.RoleId">
                          <s:text use=":role.Name" />
                        </option>
                      </s:for>
                      <span slot="label">Role</span>
                    </f-select>
                  </l-col>
                </l-row>
              </d-panel>
            </s:use>
          </l-col>
        </s:for>
        <s:if check=":banned.length">
          <l-col xs="12">
            <t-heading level="h6">Banned Users</t-heading>
          </l-col>
          <s:for subject=":banned" key="user">
            <l-col xs="12" md="6" lg="3">
              <d-panel colour="body" bordered>
                <l-row>
                  <l-col xs="6">
                    <t-paragraph>
                      <async-text data=":get_user_name(user.UserId)" />
                    </t-paragraph>
                  </l-col>
                  <l-col xs="6" style="text-align: right">
                    <f-button
                      type="button"
                      on:click="() => unban_user(user.UserId)"
                    >
                      Unban User
                    </f-button>
                  </l-col>
                </l-row>
              </d-panel>
            </l-col>
          </s:for>
        </s:if>
      </l-row>
    </d-card>
  </l-col>
</l-row>
