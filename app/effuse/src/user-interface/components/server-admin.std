<s:meta name="server-admin">
  <attr name="server_id" />
</s:meta>

<script>
  import { UseLocal } from "./client-manager";
  let client = await UseLocal(self.server_id);

  let editing = undefined;

  function on_start_editing(event) {
    editing = event.detail;
  }

  async function update_metadata({ FormData }) {
    await client.PutMetadata(FormData.name, FormData.picture);
  }

  async function create_channel({ FormData }) {
    await client.PostChannel(FormData.name, FormData.type);
    document.dispatchEvent(new CustomEvent("ChannelsUpdated"));
  }

  async function create_role({ FormData }) {
    await client.PostRole(FormData.name);
  }

  async function rename_role(role, name) {
    if (role.Name === name) return;
    await client.PutRole(role.RoleId, name);
  }

  async function rename_channel(channel, name) {
    if (channel.Name === name) return;
    await client.PutChannel(channel.ChannelId, name);
  }

  async function set_admin(role, admin) {
    const is_admin = admin === "on";
    if (role.Admin === is_admin) return;
    if (is_admin) await client.PostAdminRole(role.RoleId);
    else await client.DeleteAdminRole(role.RoleId);
  }

  async function give_read(role, channel, may_read) {
    const is_read = may_read === "on";
    if (
      !!role.Policies.find((p) => p.ChannelId === channel.ChannelId) === is_read
    )
      return;

    await client.DeleteRoleChannel(role.RoleId, channel.ChannelId);
    if (may_read)
      await client.PostRoleChannel(role.RoleId, channel.ChannelId, false);
  }

  async function give_write(role, channel, may_write) {
    const is_write = may_write === "on";
    if (
      !!role.Policies.find((p) => p.ChannelId === channel.ChannelId)?.Write ===
      is_write
    )
      return;
    await client.DeleteRoleChannel(role.RoleId, channel.ChannelId);
    await client.PostRoleChannel(role.RoleId, channel.ChannelId, true);
  }

  let user_names = {};
  async function get_user_name(user_id) {
    const profile = await client.Sso.GetPublicProfile(user_id);

    const name = profile.UserName;
    user_names[user_id] = name;
    return name;
  }

  async function set_user_role(user_id, role_id) {
    await client.PutUserRole(user_id, role_id);
  }

  async function ban_user(user_id) {
    await client.PostBannedUser(user_id);
  }

  async function unban_user(user_id) {
    await client.DeleteBannedUser(user_id);
  }

  async function invite(role_id) {
    const { Url } = await client.GetInviteLink(role_id);
    try {
      await navigator.clipboard.writeText(Url);
    } catch (err) {
      console.error(err);
      alert(
        `Automatic clipboard copy has been blocked! The URL is below:\n${Url}`
      );
    }
  }
</script>

<script on="mut">
  client = await UseLocal(self.server_id);
  const metadata = await client.GetMetadata();
  const { Base64Data, MimeType } = metadata.Icon;

  const picture_url = `data:${MimeType};base64,${Base64Data}`;

  const channels = await client.GetAllChannels();
  const roles = await client.GetAllRolesAdmin();
  const users = await client.GetAllUsers();
  const banned = await client.GetAllBannedUsers();
  const is_admin = await client.IsAdmin();
</script>

<u-fetch
  url="/ui-text/{{ locale }}/server-admin.json"
  name="text"
  fallback="/ui-text/en-GB/server-admin.json"
>
  <l-container>
    <l-row no-padding>
      <l-col xs="12">
        <d-card>
          <span slot="title">
            <u-text use="|this.state.text.server_metadata" />
          </span>
          <f-form submit="event-only" on:Submitted="update_metadata">
            <l-row>
              <l-col xs="12">
                <f-input name="name" prefill=":metadata.ServerName" required>
                  <u-text use="|this.state.text.server_name" />
                </f-input>
              </l-col>
              <l-col xs="12">
                <f-image name="picture" prefill=":picture_url">
                  <u-text use="|this.state.text.picture" />
                </f-image>
              </l-col>
              <l-col xs="12">
                <f-button type="submit">
                  <u-text use="|this.state.text.update" />
                </f-button>
              </l-col>
            </l-row>
          </f-form>
        </d-card>
      </l-col>
      <l-col xs="12">
        <d-card>
          <span slot="title">
            <u-text use="|this.state.text.channels" />
          </span>
          <s:for subject=":channels" key="channel">
            <l-accordion>
              <span slot="title">
                <s:text use=":channel.Name" />
              </span>
              <l-row>
                <l-col xs="12">
                  <f-input
                    prefill=":channel.Name"
                    on:ValueChanged="e => rename_channel(channel, e.Value)"
                  >
                    <u-text use="|this.state.text.name" />
                  </f-input>
                </l-col>
              </l-row>
            </l-accordion>
          </s:for>
          <f-form submit="event-only" on:Submitted="create_channel">
            <l-row>
              <l-col xs="12">
                <t-heading level="h6">
                  <u-text use="|this.state.text.create_channel" />
                </t-heading>
              </l-col>
              <l-col xs="12">
                <f-input name="name" required>
                  <u-text use="|this.state.text.channel_name" />
                </f-input>
              </l-col>
              <l-col xs="12">
                <f-select name="type" required>
                  <option value="Messages">
                    <u-text use="|this.state.text.types.messages" />
                  </option>
                  <option value="Forum">
                    <u-text use="|this.state.text.types.forum" />
                  </option>
                  <option value="Call">
                    <u-text use="|this.state.text.types.call" />
                  </option>
                  <option value="Calendar">
                    <u-text use="|this.state.text.types.calendar" />
                  </option>
                  <span slot="label">
                    <u-text use="|this.state.text.channel_type" />
                  </span>
                </f-select>
              </l-col>
              <l-col xs="12">
                <f-button type="submit">
                  <u-text use="|this.state.text.create" />
                </f-button>
              </l-col>
            </l-row>
          </f-form>
        </d-card>
      </l-col>
      <l-col xs="12">
        <d-card>
          <span slot="title">
            <u-text use="|this.state.text.roles" />
          </span>
          <s:for subject=":roles" key="role">
            <l-accordion>
              <span slot="title">
                <s:text use=":role.Name" />
              </span>
              <l-row>
                <l-col xs="12">
                  <f-input
                    prefill=":role.Name"
                    on:ValueChanged="e => rename_role(role, e.Value)"
                  >
                    <u-text use="|this.state.text.name" />
                  </f-input>
                </l-col>
                <l-col xs="12">
                  <f-toggle
                    prefill=":role.Admin ? 'on' : 'off'"
                    on:ValueChanged="e => set_admin(role, e.Value)"
                  >
                    <u-text use="|this.state.text.is_admin" />
                    <span slot="off">
                      <u-text use="|this.state.text.no" />
                    </span>
                    <span slot="on">
                      <u-text use="|this.state.text.yes" />
                    </span>
                  </f-toggle>
                </l-col>
                <s:for subject=":channels" key="channel">
                  <l-col xs="12" lg="4">
                    <t-paragraph>
                      <s:text use=":channel.Name" />
                    </t-paragraph>
                  </l-col>
                  <l-col xs="12" lg="4">
                    <f-toggle
                      prefill=":!!role.Policies.find(p => p.ChannelId === channel.ChannelId) ? 'on' : 'off'"
                      on:ValueChanged="e => give_read(role, channel, e.Value)"
                    >
                      <u-text use="|this.state.text.may_read" />
                      <span slot="off">
                        <u-text use="|this.state.text.no" />
                      </span>
                      <span slot="on">
                        <u-text use="|this.state.text.yes" />
                      </span>
                    </f-toggle>
                  </l-col>
                  <l-col xs="12" lg="4">
                    <f-toggle
                      prefill=":!!role.Policies.find(p => p.ChannelId === channel.ChannelId)?.Write ? 'on' : 'off'"
                      on:ValueChanged="e => give_write(role, channel, e.Value)"
                    >
                      <u-text use="|this.state.text.may_write" />
                      <span slot="off">
                        <u-text use="|this.state.text.no" />
                      </span>
                      <span slot="on">
                        <u-text use="|this.state.text.yes" />
                      </span>
                    </f-toggle>
                  </l-col>
                </s:for>
                <l-col xs="12">
                  <f-button
                    type="button"
                    colour="rainbow_5"
                    on:click="() => invite(role.RoleId)"
                  >
                    <u-text use="|this.state.text.copy_invite_link" />
                  </f-button>
                </l-col>
              </l-row>
            </l-accordion>
          </s:for>

          <f-form submit="event-only" on:Submitted="create_role">
            <l-row>
              <l-col xs="12">
                <t-heading level="h6">
                  <u-text use="|this.state.text.create_role" />
                </t-heading>
              </l-col>
              <l-col xs="12">
                <f-input name="name" required>
                  <u-text use="|this.state.text.role_name" />
                </f-input>
              </l-col>
              <l-col xs="12">
                <f-button type="submit">
                  <u-text use="|this.state.text.create" />
                </f-button>
              </l-col>
            </l-row>
          </f-form>
        </d-card>
      </l-col>
      <l-col xs="12">
        <d-card>
          <span slot="title">
            <u-text use="|this.state.text.users" />
          </span>
          <l-row>
            <s:for subject=":users" key="user">
              <l-col xs="12" md="6" lg="4" xl="3">
                <s:use get=":roles.find(r => r.RoleId === user.Role)" as="role">
                  <d-panel colour="body" bordered>
                    <l-row>
                      <l-col xs="6">
                        <t-paragraph>
                          <async-text data=":get_user_name(user.UserId)" />
                        </t-paragraph>
                      </l-col>
                      <l-col xs="6" style="text-align: right">
                        <f-button
                          type="button"
                          on:click="() => ban_user(user.UserId)"
                        >
                          <u-text use="|this.state.text.ban_user" />
                        </f-button>
                      </l-col>
                      <l-col xs="12">
                        <f-singleselect
                          name="type"
                          prefill=":role.RoleId"
                          on:ValueChanged="e => set_user_role(user.UserId, e.Value)"
                        >
                          <s:for subject=":roles" key="r">
                            <option value=":r.RoleId">
                              <s:text use=":r.Name" />
                            </option>
                          </s:for>
                          <span slot="label">
                            <u-text use="|this.state.text.role" />
                          </span>
                        </f-singleselect>
                      </l-col>
                    </l-row>
                  </d-panel>
                </s:use>
              </l-col>
            </s:for>
          </l-row>
          <l-row>
            <s:if check=":banned.length">
              <l-col xs="12">
                <t-heading level="h6">
                  <u-text use="|this.state.text.banned_users" />
                </t-heading>
              </l-col>
              <s:for subject=":banned" key="user">
                <l-col xs="12" md="6" lg="3">
                  <d-panel colour="body" bordered>
                    <l-row>
                      <l-col xs="12">
                        <t-paragraph>
                          <async-text data=":get_user_name(user.UserId)" />
                        </t-paragraph>
                      </l-col>
                      <l-col xs="12" style="text-align: right">
                        <f-button
                          type="button"
                          on:click="() => unban_user(user.UserId)"
                        >
                          <u-text use="|this.state.text.unban_user" />
                        </f-button>
                      </l-col>
                    </l-row>
                  </d-panel>
                </l-col>
              </s:for>
            </s:if>
          </l-row>
        </d-card>
      </l-col>
    </l-row>
  </l-container>
</u-fetch>
