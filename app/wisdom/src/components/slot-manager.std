<s:meta name="slot-manager">
  <attr name="data" type="any" />
  <attr name="schema" type="any" />
</s:meta>

<script>
  import { GetJson, PutJson } from "../utils/fetch";
  import Url from "@ipheion/url";

  let adding_block = false;
  const blocks = await GetJson("/api/v1/schema/blocks");
  const option_blocks = await GetJson("/api/v1/blocks");

  function trigger(target, blocks) {
    self.dispatchEvent(
      new CustomEvent("slot-changed", {
        detail: {
          slot_name: target,
          blocks: blocks,
        },
      })
    );
    adding_block = false;
    self.should_render();
  }

  function add(id) {
    trigger(adding_block, [...(self.data.slots[adding_block] ?? []), id]);
  }

  function add_block(data) {
    add(data.ResponseJson.id);
  }

  function add_existing_block(data) {
    add(data.FormData.id);
  }

  function move_top(slot, id) {
    return (e) => {
      e.preventDefault();
      e.stopPropagation();
      const existing = self.data.slots[slot] ?? [];
      trigger(slot, [id, ...existing.filter((r) => r !== id)]);
    };
  }

  function move_bottom(slot, id) {
    return (e) => {
      e.preventDefault();
      e.stopPropagation();
      const existing = self.data.slots[slot] ?? [];
      trigger(slot, [...existing.filter((r) => r !== id), id]);
    };
  }

  function remove_block(slot, id) {
    return (e) => {
      e.preventDefault();
      e.stopPropagation();
      const existing = self.data.slots[slot] ?? [];
      trigger(slot, [...existing.filter((r) => r !== id)]);
    };
  }
</script>

<l-container>
  <l-row>
    <l-col xs="12">
      <s:for subject=":self.schema.slots" key="slot">
        <l-accordion>
          <span slot="title">
            <s:text use=":slot.label" />
          </span>

          <l-row no-padding>
            <s:if check=":self.data.slot_previews[slot.name]">
              <l-col xs="12">
                <d-listgroup>
                  <s:for
                    subject=":self.data.slot_previews[slot.name]"
                    key="entry"
                  >
                    <t-link
                      href=":new Url('/blocks/:block_id', { block_id: entry?.id }).Href"
                      spa
                    >
                      <span>
                        <s:text use=":entry.preview" />
                      </span>

                      <t-icon
                        name="arrow-up"
                        colour="surface"
                        text
                        on:click="move_top(slot.name, entry?.id)"
                      />
                      <t-icon
                        name="arrow-down"
                        colour="surface"
                        text
                        on:click="move_bottom(slot.name, entry?.id)"
                      />
                      <t-icon
                        name="delete-bin"
                        colour="surface"
                        text
                        on:click="remove_block(slot.name, entry?.id)"
                      />
                    </t-link>
                  </s:for>
                </d-listgroup>
              </l-col>
            </s:if>

            <l-col xs="12">
              <f-button
                type="button"
                on:click="() => { adding_block = slot.name }"
              >
                Add Block
              </f-button>
            </l-col>
          </l-row>
        </l-accordion>
      </s:for>
    </l-col>
  </l-row>
</l-container>

<o-modal
  open=":!!adding_block"
  on:CloseRequested="() => (adding_block = false)"
>
  <span slot="title">Add a Block</span>
  <f-form url="/api/v1/blocks" method="post" on:AfterSubmit="add_block">
    <l-row>
      <l-col xs="12">
        <t-heading level="h5">Create a new Block</t-heading>
      </l-col>
      <l-col xs="12">
        <f-input name="slug">
          Slug (optional)
          <span slot="help">
            Use this to allow reuse of the block in other places. Otherwise it
            will only be available here.
          </span>
          <span slot="invalid">
            Slugs may only have lower case characters, numbers, and dashes
          </span>
        </f-input>
      </l-col>
      <l-col xs="12">
        <f-select name="type" required>
          <span slot="label">Block Type</span>
          <span slot="empty">Please select a block type</span>
          <s:for subject=":blocks" key="block">
            <option value=":block"><s:text use=":block" /></option>
          </s:for>
        </f-select>
      </l-col>
      <l-col xs="12">
        <f-button type="submit">Create Block</f-button>
      </l-col>
    </l-row>
  </f-form>
  <f-form submit="event-only" on:Submitted="add_existing_block">
    <l-row>
      <l-col xs="12">
        <t-heading level="h5">Add an existing Block</t-heading>
      </l-col>
      <l-col xs="12">
        <f-select name="id" required>
          <span slot="label">Block</span>
          <span slot="empty">Please select a block</span>
          <s:for subject=":option_blocks" key="block">
            <option value=":block.id"><s:text use=":block.slug" /></option>
          </s:for>
        </f-select>
      </l-col>
      <l-col xs="12">
        <f-button type="submit">Create Block</f-button>
      </l-col>
    </l-row>
  </f-form>
</o-modal>

<style>
  d-listgroup t-link {
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  d-listgroup t-link span {
    flex: 1;
  }

  d-listgroup t-link t-icon {
    padding: 0.25rem;
  }
</style>
