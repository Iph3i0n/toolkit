<s:meta name="file-picker"></s:meta>

<script>
  import { GetJson, PostJson } from "../utils/fetch";
  import Url from "@ipheion/url";

  let open = false;

  let { id: directory } = await GetJson("/api/v1/layout/media-root");

  const to_data_url = (file) => {
    return new Promise((res, rej) => {
      const reader = new FileReader();
      reader.addEventListener("load", () => {
        res(reader.result);
      });

      reader.readAsDataURL(file);
    });
  };

  async function upload(event) {
    const instance = event.currentTarget?.Wholemeal;
    const file = instance?.value;
    if (!file || !(file instanceof File)) return;
    const dataurl = await to_data_url(file);
    const [, ...data] = dataurl.split(",");
    await PostJson(new Url("/api/v1/media/:id/files", { id: directory }), {
      name: file.name,
      mime: file.type,
      data: data.join(","),
    });
    self.should_render();
  }

  async function mkdir(event) {
    await PostJson("/api/v1/media", {
      slug: event.FormData.name,
      parent: directory,
    });
  }

  function select_image(file) {
    return () => {
      open = false;
      self.dispatchEvent(
        new CustomEvent("image-selected", {
          detail: {
            value: "$file:" + file.id,
          },
        })
      );
    };
  }

  function close() {
    open = false;
    self.dispatchEvent(new CustomEvent("picker-closed"));
  }

  window.GetFile = () =>
    new Promise((res) => {
      open = true;
      self.should_render();

      function close_handler() {
        res();
        self.removeEventListener("image-selected", image_handler);
        self.removeEventListener("picker-closed", close_handler);
      }

      function image_handler(e) {
        res(e.detail.value);
        self.removeEventListener("image-selected", image_handler);
        self.removeEventListener("picker-closed", close_handler);
      }

      self.addEventListener("image-selected", image_handler);
      self.addEventListener("picker-closed", close_handler);
    });
</script>

<script on="mut">
  const data = await GetJson(new Url("/api/v1/media/:id", { id: directory }));
</script>

<o-modal open=":open" on:CloseRequested="close" size="large">
  <span slot="title"><slot name="heading" /></span>
  <s:if check="data.breadcrumbs.length">
    <l-row>
      <l-col xs="12">
        <t-link
          on:click="() => (directory = data.breadcrumbs[data.breadcrumbs.length - 1].id)"
          block
        >
          <t-icon name="arrow-go-back" colour="contrast" text />
        </t-link>
      </l-col>
    </l-row>
  </s:if>
  <l-row>
    <s:for subject=":data.children" key="child">
      <l-col xs="12" md="6" lg="4" xl="3">
        <t-link on:click="() => (directory = child.id)" block>
          <s:text use=":child.slug" />
        </t-link>
      </l-col>
    </s:for>
  </l-row>
  <l-row>
    <s:for subject=":data.files" key="file">
      <l-col xs="12" md="6" lg="4" xl="3">
        <d-panel class="image-panel" bordered on:click="select_image(file)">
          <img
            src=":new Url('/api/v1/files/:id', { id: file.id }).Href"
            alt=":file"
          />
        </d-panel>
      </l-col>
    </s:for>
  </l-row>
  <l-row>
    <l-col xs="12">
      <f-form submit="event-only" on:AfterSubmit="mkdir">
        <div class="create-dir">
          <f-input type="text" name="name" required validate="^[0-9a-z\-]+$">
            Directory Name
            <span slot="empty">Please enter a slug</span>
            <span slot="invalid">
              Slugs may only have lower case characters, numbers, and dashes
            </span>
          </f-input>
          <f-button type="submit">Create</f-button>
        </div>
      </f-form>
    </l-col>
  </l-row>
  <l-row>
    <l-col xs="12">
      <f-file on:ValueChanged="upload">Upload a file</f-file>
    </l-col>
  </l-row>
</o-modal>

<style>
  .create-dir {
    display: flex;
    align-items: center;
    justify-content: flex-start;
  }

  .create-dir f-input {
    flex: 1;
    margin-right: 0.5rem;
  }

  .create-dir f-button {
    height: 100%;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    max-height: 20rem;
  }

  .image-panel {
    font-size: 0;
    cursor: pointer;
  }
</style>
