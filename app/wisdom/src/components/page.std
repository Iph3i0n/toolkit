<s:meta name="wisdom-page">
  <attr name="page_id" type="string">The ID of the current page</attr>
</s:meta>

<script>
  import { GetJson, PutJson, Delete } from "../utils/fetch";
  import Url from "@ipheion/url";

  let creating = false;

  const layouts = await GetJson("/api/v1/schema/layouts");

  function delete_page(id) {
    return async () => {
      if (!confirm("Are you sure? This cannot be undone!")) return;
      await Delete(new Url("/api/v1/pages/:id", { id: self.page_id }));
      Router.Push("/");
    };
  }
</script>

<script on="mut">
  const data = await GetJson(
    new Url("/api/v1/pages/:id", { id: self.page_id })
  );

  const layout = await GetJson(
    new Url("/api/v1/schema/layouts/:id", { id: data.layout })
  );
  const pages = await GetJson(
    new Url("/api/v1/pages/:id/children", { id: self.page_id })
  );

  /** @param {CustomEvent} event */
  async function add_block(event) {
    const slots = data.slots ?? {};
    await PutJson(new Url("/api/v1/pages/:id/slots", { id: self.page_id }), {
      slots: {
        ...slots,
        [event.detail.slot_name]: event.detail.blocks,
      },
    });
    self.should_render();
  }
</script>

<l-container>
  <l-row>
    <l-col xs="12">
      <t-crumbs>
        <s:for subject=":data.breadcrumbs" key="crumb">
          <t-link
            href=":new Url('/pages/:page_id', { page_id: crumb.id }).Href"
            spa
          >
            <s:text use=":crumb.slug" />
          </t-link>
        </s:for>
        <span>
          <s:text use=":data.slug" />
        </span>
      </t-crumbs>
    </l-col>
    <l-col xs="12">
      <t-heading level="h3">Child Pages</t-heading>
    </l-col>
    <s:if check=":pages.length">
      <l-col xs="12">
        <d-listgroup>
          <s:for subject=":pages" key="page">
            <t-link
              href=":new Url('/pages/:page_id', { page_id: page.id }).Href"
              spa
            >
              <s:text use=":page.slug" />
            </t-link>
          </s:for>
        </d-listgroup>
      </l-col>
    </s:if>
    <l-col xs="12">
      <f-button type="button" on:click="() => { creating = true }">
        Create a Child Page
      </f-button>
      <f-button
        type="link"
        href=":data.preview_url"
        target="_blank"
        colour="contrast"
      >
        Preview Page
      </f-button>
      <f-button type="button" colour="warning" on:click="delete_page()">
        Delete Page
      </f-button>
    </l-col>
  </l-row>
</l-container>

<f-form
  url=":new Url('/api/v1/pages/:id', { id: self.page_id }).Href"
  method="put"
  on:AfterSubmit="() => { self.should_render() }"
>
  <f-hidden name="parent" prefill=":data.parent" />
  <div>
    <l-container>
      <l-row>
        <l-col xs="12">
          <t-heading level="h3">Page Metadata</t-heading>
        </l-col>
        <l-col xs="12">
          <f-input
            name="slug"
            prefill=":data.slug"
            required
            validate="^[0-9a-z\-]+$"
            type="text"
          >
            Page Slug
            <span slot="empty">Please enter a slug</span>
            <span slot="invalid">
              Slugs may only have lower case characters, numbers, and dashes
            </span>
          </f-input>
        </l-col>
        <l-col xs="12">
          <f-singleselect name="layout" prefill=":data.layout" required>
            <span slot="label">Page Layout</span>
            <span slot="empty">Please select a layout</span>
            <s:for subject=":layouts" key="layout">
              <option value=":layout"><s:text use=":layout" /></option>
            </s:for>
          </f-singleselect>
        </l-col>
        <l-col xs="12">
          <f-button type="submit">Update Metadata</f-button>
        </l-col>
        <l-col xs="12">
          <t-heading level="h3">Page Content</t-heading>
        </l-col>
      </l-row>
    </l-container>
  </div>
</f-form>

<content-form
  url=":new Url('/api/v1/pages/:id/properties', { id: self.page_id }).Href"
  data=":data"
  schema=":layout"
  on:submit-complete="() => self.should_render()"
>
  Update Content
</content-form>

<slot-manager data=":data" schema=":layout" on:slot-changed="add_block" />

<o-modal open=":creating" on:CloseRequested="() => (creating = false)">
  <span slot="title">Create a Page</span>
  <f-form
    url="/api/v1/pages"
    method="post"
    on:AfterSubmit="() => { creating = false; self.should_render() }"
  >
    <f-hidden name="parent" prefill=":self.page_id" />
    <l-row>
      <l-col xs="12">
        <f-input name="slug" required validate="^[0-9a-z\-]+$" type="text">
          Page Slug
          <span slot="empty">Please enter a slug</span>
          <span slot="invalid">
            Slugs may only have lower case characters, numbers, and dashes
          </span>
        </f-input>
      </l-col>
      <l-col xs="12">
        <f-singleselect name="layout" required>
          <span slot="label">Page Layout</span>
          <span slot="empty">Please select a layout</span>
          <s:for subject=":layouts" key="layout">
            <option value=":layout"><s:text use=":layout" /></option>
          </s:for>
        </f-singleselect>
      </l-col>
      <l-col xs="12">
        <f-button type="submit">Create Page</f-button>
      </l-col>
    </l-row>
  </f-form>
</o-modal>
