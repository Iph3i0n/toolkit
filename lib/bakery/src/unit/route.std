<s:meta name="u-route">
  Only displays the children if the browser matches the particular route.
  Provided routes are relative to the route used below, even if they start with
  a /.
  <attr name="path" type="string">
    The current path to match. Will be relative to the current URL. Use `:` at
    the start of a segment to use it as a parameter. The parameters will be
    available to any `u-fetch` tag that is a child.
  </attr>
  <attr name="ele" type="string">
    The target HTML tag. Use this if you have a single component as a child. The
    child will only be rendered on a match, allowing for greater optimisation.
  </attr>
  <attr name="exact" type="boolean">
    If set then only exact matches will be allowed. Useful for home pages and
    landing pages.
  </attr>
  <member name="params" type="Record<string, string>" readonly>
    Readonly property to get the current params from a match.
  </member>
  <member name="Push" type="(url: string) => void" readonly>
    Navigate to a URL.
  </member>
  <member name="Replace" type="(url: string) => void" readonly>
    Navigate to a URL without adding to the history.
  </member>
  <event name="MatchChanged" type="MatchEvent">
    Fired when the URL changes, causing the match state to change.
    <key name="Matches" type="boolean">Whether the current router matches</key>
    <key name="Params" type="Record<string, string>">
      If there is a match and the router contains parameters then the parameters
      are here. If not then an empty object.
    </key>
  </event>
  <base use="Router" from="../global/base-classes/router" default />
</s:meta>

<script>
  import { MatchEvent } from "../global/events/routing";

  document.addEventListener("NavigationEvent", () => {
    self.should_render();
  });
</script>

<script on="after">
  if (!self.ele) return;
  const { match, params } = self.Matches;
  if (match) {
    let ele = self.root.querySelector(self.ele);
    if (!ele) {
      ele = document.createElement(self.ele);
      self.root.appendChild(ele);
    }

    for (const key in params) {
      ele.setAttribute(key, params[key]);
    }
  } else {
    /** @type {HTMLElement} */
    const existing = self.root.querySelector(self.ele);
    if (existing) {
      existing.remove();
    }
  }
</script>

<s:if check=":!self.ele && self.Matches.match">
  <slot />
</s:if>
