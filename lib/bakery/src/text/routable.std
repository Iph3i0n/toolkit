<s:meta name="t-routeable">
  Treate a block as a clickable link. Has no styling of its own.
  <attr name="href" optional>
    The URL to send the user to if the button is being used as a link. If not
    provided then the link will simply function as a button.
  </attr>
  <attr name="target" type="import('../global/types/html').Target" optional>
    The standard target from an anchor element.
  </attr>
  <attr name="private" type="boolean">
    If set then the link will be treated as external. This means that
    `rel="noreferrer noopener"` will be applied.
  </attr>
  <attr name="block" type="boolean">
    If set then the link will be displayed as a block rather than an inline
    block.
  </attr>
  <attr name="spa" type="boolean">
    If set then the link will use a SPA push to navigate rather than loading the
    page. Will be ignored if `target` or `private` are set.
  </attr>
  <attr name="replace" type="boolean">
    Only used if `spa` is set. Will make the link replace the state rather than
    push. Useful if you don't want the back button to keep people on the page.
  </attr>
  <aria role="button" />
  <base use="UrlBuilder" from="../global/base-classes/router" />
</s:meta>

<script>
  import Router from "../global/base-classes/router";
  import { on_key_handler } from "../global/events/keyboard";

  self.tabIndex = 0;

  function activate() {
    if (!self.href) return;
    const url = self.Render(self.href);
    if (self.target)
      window.open(url, self.target, self.private ? "noreferrer" : undefined);
    else if (self.spa)
      if (self.replace) Router.Replace(url);
      else Router.Push(url);
    else window.location.href = url;
  }

  self.addEventListener("click", activate);

  self.addEventListener(
    "keyup",
    on_key_handler({
      Enter: () => {
        self.dispatchEvent(new MouseEvent("click", { bubbles: true }));
        activate();
      },
    })
  );
</script>

<style>
  :host {
    display: block;
    cursor: pointer;
    opacity: 1;
    transform: scale(1);
    transition: opacity 100ms, transform 100ms;
  }

  :host(:hover),
  :host(:focus) {
    outline: none;
    text-decoration: none;
    opacity: 0.75;
    transform: scale(1.05);
  }
</style>

<slot></slot>
